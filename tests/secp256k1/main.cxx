#include <iostream>

#include "api.h"

using namespace std;

string hexlify(const uint8_t *buf, int buf_len);

// keypair in hex
struct keypair
{
  string priv;
  string pub;
};

// test case generated by sammyne/bip32
int main()
{
  const int SEED_LEN = 64;
  const auto curve = CURVE::secp256k1;

  uint8_t seed[SEED_LEN];
  for (int i = 0; i < SEED_LEN; i++)
  {
    seed[i] = i;
  }
  hexlify(seed, SEED_LEN);

  PrivKey master;

  if (auto err = bip32_new_master_key(&master, seed, SEED_LEN, curve); err)
  {
    cout << "bip32_new_master_key failed: " << err << endl;
    return -1;
  }

  {
    const auto expected = keypair{
      priv : "d39334c77f6f46233b80b4d06e982a3de4635de11923af076ebf8aa42fc2ef4f",
      pub : "02b8d1bb0f59a7dd44d4a148607418b327234c6870db2e5d85e7349591aaa427c6",
    };

    if (auto priv = hexlify(master.priv, 32); expected.priv != priv)
    {
      cout << "unexpected master private key" << endl;
      cout << "expect " << expected.priv << endl;
      cout << "   got " << priv << endl;
      return -1;
    }

    if (auto pub = hexlify(master.pub, 33); expected.pub != pub)
    {
      cout << "unexpected master public key" << endl;
      cout << "expect " << expected.pub << endl;
      cout << "   got " << pub << endl;
      return -1;
    }
  }

  const int CHILD_INDEX = 123;

  {
    PrivKey non_hardened_child;
    if (auto err = bip32_privkey_child(&non_hardened_child, &master, CHILD_INDEX); err)
    {
      cout << "bip32_privkey_child failed: " << err << endl;
      return -1;
    }

    const auto expected = keypair{
      priv : "2274917aba7abaea7a4e196b199580124fba6f304daf76e9b61a05d9d3c3c352",
      pub : "0327a6673128f473d65df2dd089b360a6e4df1d0f028865729b3468fba536e7749",
    };

    if (auto priv = hexlify(non_hardened_child.priv, 32); expected.priv != priv)
    {
      cout << "unexpected non_hardened_child private key" << endl;
      cout << "expect " << expected.priv << endl;
      cout << "   got " << priv << endl;
      return -1;
    }

    if (auto pub = hexlify(non_hardened_child.pub, 33); expected.pub != pub)
    {
      cout << "unexpected non_hardened_child public key" << endl;
      cout << "expect " << expected.pub << endl;
      cout << "   got " << pub << endl;
      return -1;
    }
  }

  {
    PrivKey hardened_child;
    auto child_idx = bip32_harden_index(CHILD_INDEX);
    if (auto err = bip32_privkey_child(&hardened_child, &master, child_idx); err)
    {
      cout << "bip32_privkey_child failed: " << err << endl;
      return -1;
    }

    const auto expected = keypair{
      priv : "2fb60bbf2140ef04db4997461ee53d51fd44582d7d308d16c25f0ba3cedb3235",
      pub : "0369a76cf916229bfb8da297e436541e5df95068d3056c7fcc3699ad1557d11a50",
    };

    if (auto priv = hexlify(hardened_child.priv, 32); expected.priv != priv)
    {
      cout << "unexpected hardened_child private key" << endl;
      cout << "expect " << expected.priv << endl;
      cout << "   got " << priv << endl;
      return -1;
    }

    if (auto pub = hexlify(hardened_child.pub, 33); expected.pub != pub)
    {
      cout << "unexpected hardened_child public key" << endl;
      cout << "expect " << expected.pub << endl;
      cout << "   got " << pub << endl;
      return -1;
    }
  }

  cout << "ok :)" << endl;

  return 0;
}

string hexlify(const uint8_t *buf, int buf_len)
{
  const auto ALPHABET = "0123456789abcdef";

  string out;
  for (auto i = 0; i < buf_len; i++)
  {
    //printf("%02x", buf[i]);
    out += ALPHABET[buf[i] >> 4];
    out += ALPHABET[buf[i] & 0x0f];
  }

  return out;
}